Outline of Slides for LLC Python

----

Intro slides (as in original, with changes for installation of Wing101 instead of PyCharm)

---

TODAY'S PROJECT

TODO - update this

---

PYTHON & WING 101

We're going to write programs in the language Python, and we'll use another program called Wing to do this. Wing 101 is what's called an "Interactive Development Environment". It's a program that makes it easier to write programs.

--- 

WRITING PYTHON PROGRAMS

We'll write and save our Python programs in .py files (or, "modules", to Python programmers). There are other ways to run bits of Python code as well, but it's easier to save and edit when we save it in a file.

---

YOUR FIRST PYTHON PROGRAM

Our first program is going to do three things: 

1. Ask for some input from the user of the program (that's you!)
2. Store the information the user gives in a _variable_.
3. Output information so the user can see it.

Go to File -> New to create a new .py file.
Go to File -> Save As... and save the file as "ex1.py" in the "exercises" folder.
Type the following lines of code _exactly_ as written:
    name = raw_input('What is your name? ')
    print('Hello', name)
Click the green "Run" button.
Type your name (or anything, really) at the prompt in the "Python Shell" part of the screen.

---

HOW DID IT GO? 

First, some of you may have got some errors. This is a PERFECTLY NORMAL part of programming. 
Unlike humans, computers are not very smart.

Humans can read something that doesn't quite follow the rules of the language.
Computers can't. Some typos in that code would cause it not to work (ie. missing a ")" or misspelling "print")
Luckily, Python tries to help us figure out what happened. Error messages contain information about where an error occurred, and what kind of error it was. With practice, you can learn to read them.

---

WHAT DID WE JUST DO?

You just wrote your first program!
It contains 2 lines of code, and a bunch of different programming concepts:
 - functions: raw_input and print
 - variables: name
 - strings: 'What is your name?' and 'Hello'. Your name was stored as a string too.

---

FUNCTIONS AND VARIABLES

In programming, we want to be able to take some of the work we've done and store it somewhere for later. Functions are names we can use to refer to chunks of code that either we, or someone else, has written. There are LOTS of functions that already exist in Python, and we'll use some of them today.

Variables are names we can use to refer to pieces of information that we want to work with. In this example, the variable name was used to refer to whatever you entered as your name. 

---

THE PRINT FUNCTION

We'll use this one a lot today to be able to see the result of whatever we've computed. Notice how we used print in Exercise 1; we put quotes around "Hello" and not around name. TODO finish

---

THE RAW_INPUT FUNCTION

TODO

---

REASSIGNING VARIABLES

The value that a variable refers to can change. For example, we could add to Exercise 1, but ... TODO

---

STRINGS AND OTHER TYPES

In Python (and many other programming languages) a _string_ is data that represents a sequence of characters, or text. For example, 'Hello world!' and 'By 2016, I thought we would have time travel', are strings.

There are other types too. The other ones we'll see today are:
- ints and floats: represent numbers. Because of these different types (and other limitations of computers), math in Python might look a little different from what you're used to. (For example, try printing 7/3 and 7/3.0)
- bool (short for Boolean): we'll use these today. Basically a type for representing the answer to yes or no questions (in programming, we call this True or False).
- lists and dicts: More on these later, but these are both ways of storing multiple pieces of information under one variable.

---

COMMENTS

Often, programmers write comments in their code, which are notes to other humans that Python should ignore. 

To write a comment in Python, start a line with #. Python will ignore it, and you can write an explanation for future-you about what the heck it was you were doing here.

---

CONDITIONALS

** keep old slides here I think (Ex2 and Ex3)
** keep from "Conditionals & Logic" to "Ex3" (inclusive)
** then, changes to content of file reading to incorporate it into existing example

--

READING FROM FILES

Most programs don't get their data by having the user sit and type everything in. Instead, they read from files. When you're working with some kind of dataset, it will almost certainly come to you in a file, and hopefully in a format that you can work with in Python.

In this session, we'll work with csv (comma-separated value) files. You might have seen these before... you can also create and work with them in Excel.

We're going to need to learn a few more things before we can do that though. 

** keep most of the next few slides
** Ex 4 will be reading from a csv file of days and temps, and printing what to wear to screen
** will require loops, split, convert to int, list indexing
** optional enhancement: check for the days (ie Wed, pink)

--- 

LUNCH

---

USING LISTS TO STORE DATA

* TODO show how to accumulate a list
* use max, min, sum, find average
* exercises: take code from before lunch, find average temp

---

COUNTING WITH DICTIONARIES

* exercise will be counting number of entries for each month... or if tired of weather, reading historic sites dataset and counting sites per province

---

WRITING TO FILES

* can use some of existing slides
* exercise: write the results for previous exercise to a file
* take generated .csv and use plotly

--- 

FINAL EXERCISE

* keep existing slide, but add some more options
* historic sites: # in your province or city, northernmost, southernmost, etc, 
* would like to add one more dataset + a couple questions on it
